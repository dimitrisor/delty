name: Deploy

permissions:
  packages: write
  contents: read

# The workflow will run whenever a push occurs on the main branch
on:
  push:
    branches: [main]

env:
  TAG: ${{ ( github.event_name == 'pull_request' && format('pr-{0}', github.event.number) ) || 'latest' }}
  DELTY_SERVER_USERNAME: ${{ secrets.DELTY_SERVER_USERNAME }}
  DELTY_SERVER_IP: ${{ vars.DELTY_SERVER_IP }}

jobs:
  test:
    name: "Test"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: delty
          POSTGRES_USER: delty_user
          POSTGRES_PASSWORD: delty_pass
        options: >-
          --health-cmd "pg_isready -h localhost -p 5432 -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7.4
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping | grep PONG"
    env:
      DJANGO_SETTINGS_MODULE: "app.settings.test"
      DATABASE_URL: "postgres://delty_user:delty_pass@localhost:5432/delty"
    steps:
      - name: "Checkout GH repository"
        uses: actions/checkout@v4
      - name: "Setup Cue"
        uses: cue-lang/setup-cue@v1.0.0-alpha.2
        with:
          version: v0.4.3

      - name: "Cache Poetry Dependencies"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-deps-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-deps-

      - name: "Install Poetry"
        run: pipx install poetry
      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.4
          cache: poetry
      - name: "Install packages"
        run: poetry install
      - name: "Run DB migrations"
        run: poetry run python manage.py migrate
      - name: "Run collectstatic"
        run: poetry run python manage.py collectstatic --noinput
      - name: "Activate Environment"
        run: source $(poetry env info --path)/bin/activate
      - name: "Cache Pre-commit"
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: "Install pre-commit"
        run: poetry run pip install pre-commit
      - name: "Run pre-commit"
        run: poetry run pre-commit run --show-diff-on-failure --color=always -a --hook-stage manual
      - name: "Run tests"
        run: poetry run coverage run --source='.' manage.py test &&
          poetry run coverage report -m &&
          poetry run coverage html

  build-image:
    name: "Build Image"
    needs: [ test ]
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: "Checkout GH repository"
        uses: actions/checkout@v4
      - name: "Docker: Set up Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "Docker: Login to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Docker: Build and push Delty image"
        id: build-and-push-delty
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/dimitrisor/delty:${{ env.TAG }}
            ghcr.io/dimitrisor/delty:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: "Docker: Delty Image Information"
        run: |
          {
            echo "### :rocket: Image Build Information"
            echo "\`\`\`"
            echo "Image name: ghcr.io/dimitrisor/delty:${{ env.TAG }}@${{ steps.build-and-push-delty.outputs.digest }}"
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY
      - name: "Docker: Build and push Delty-Airflow image"
        id: build-and-push-airflow
        uses: docker/build-push-action@v5
        with:
          context: ./airflow
          file: airflow/Dockerfile
          push: true
          tags: |
            ghcr.io/dimitrisor/delty-airflow:${{ env.TAG }}
            ghcr.io/dimitrisor/delty-airflow:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: "Docker: Delty-Airflow Image Information"
        run: |
          {
            echo "### :rocket: Image Build Information"
            echo "\`\`\`"
            echo "Image name: ghcr.io/dimitrisor/delty-airflow:${{ env.TAG }}@${{ steps.build-and-push-airflow.outputs.digest }}"
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY
    outputs:
      delty-image: ghcr.io/dimitrisor/delty@${{ steps.build-and-push-delty.outputs.digest }}
      delty-airflow-image: ghcr.io/dimitrisor/delty-airflow@${{ steps.build-and-push-airflow.outputs.digest }}

  production-deploy:
    name: "Deploy to Production"
    needs: [ build-image ]
    runs-on: ubuntu-latest
    steps:
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DELTY_SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $DELTY_SERVER_IP >> ~/.ssh/known_hosts

      # Step 3: SSH into the server and deploy the Docker container
      - name: Deploy Django application
        run: |
          ssh -v -o StrictHostKeyChecking=no $DELTY_SERVER_USERNAME@$DELTY_SERVER_IP << 'EOF'

          # Log in to GHCR
          echo "${{ secrets.DELTY_GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Pull the latest application delty container
          docker pull ${{ needs.build-image.outputs.delty-image }}

          # Stop and remove existing application container
          docker stop delty || true
          docker rm delty || true

          # Run the Django application with Gunicorn
          docker run -d --name delty \
            --network delty_network \
            -p 8000:8000 \
            -p 50051:50051 \
            --env-file ~/app/.env \
            -v ~/app/staticfiles:/app/staticfiles \
            -e DATABASE_URL="postgres://delty_user:${{ secrets.DATABASE_PASSWORD }}@${{ vars.DELTY_SERVER_IP }}:5432/delty" \
            -e REDIS_BROKER_URL="redis://:${{ secrets.REDIS_PASSWORD}}@${{ vars.DELTY_SERVER_IP }}:6379/3" \
            -e REDIS_CACHE_URL="redis://:${{ secrets.REDIS_PASSWORD}}@${{ vars.DELTY_SERVER_IP }}:6379/4" \
            -e AWS_ACCESS_KEY_ID="${{ vars.AWS_ACCESS_KEY_ID}}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY}}" \
            -e GRPC_PORT=50051 \
            ${{ needs.build-image.outputs.delty-image }} \
            sh -c "python manage.py collectstatic --noinput && python manage.py migrate && (gunicorn app.wsgi:application --bind 0.0.0.0:8000 --workers 3 & poetry run python manage.py run_grpc_server)"

          # Stop and remove existing worker container
          docker stop delty-worker || true
          docker rm delty-worker || true

          # Run the Delty worker service
          docker run -d --name delty-worker \
            --network delty_network \
            --env-file ~/app/.env \
            -v ~/app/staticfiles:/app/staticfiles \
            -e DATABASE_URL="postgres://delty_user:${{ secrets.DATABASE_PASSWORD }}@${{ vars.DELTY_SERVER_IP }}:5432/delty" \
            -e REDIS_BROKER_URL="redis://:${{ secrets.REDIS_PASSWORD}}@${{ vars.DELTY_SERVER_IP }}:6379/3" \
            -e REDIS_CACHE_URL="redis://:${{ secrets.REDIS_PASSWORD}}@${{ vars.DELTY_SERVER_IP }}:6379/4" \
            -e AWS_ACCESS_KEY_ID="${{ vars.AWS_ACCESS_KEY_ID}}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY}}" \
            ${{ needs.build-image.outputs.delty-image }} \
            sh -c "python manage.py collectstatic --noinput && python manage.py rundramatiq --processes 2"

          # Pull the latest application delty-airflow container
          docker pull ${{ needs.build-image.outputs.delty-airflow-image }}

          # Stop and remove existing application container
          docker stop delty-airflow || true
          docker rm delty-airflow || true

          # Run the delty-airflow service
          docker run -d --name delty-airflow \
            -p 8080:8080 \
            -e AIRFLOW__DATABASE__SQL_ALCHEMY_CONN="postgresql+psycopg2://delty_user:${{ secrets.DATABASE_PASSWORD }}@${{ vars.DELTY_SERVER_IP }}:5432/airflow" \
            -e AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False \
            -e AIRFLOW__CORE__EXECUTOR=LocalExecutor \
            -e AIRFLOW__CORE__LOAD_EXAMPLES=False \
            -e GRPC_SERVER_ADDRESS=${{ vars.DELTY_SERVER_IP }}:50051 \
            ${{ needs.build-image.outputs.delty-airflow-image }}

          # Check if the MinIO container exists
          if [ "$(docker ps -a -q -f name=s3)" ]; then
            if [ "$(docker ps -q -f name=s3)" ]; then
              echo "MinIO container is already running."
            else
              echo "Run MinIO container."
              docker start s3
            fi
          else
            echo "MinIO container not found. Running the MinIO container for the first time."
            docker run -d --name s3 \
              --network delty_network \
              --env-file ~/app/.env \
              -p 9000:9000 -p 9001:9001 \
              -e MINIO_ROOT_USER=${{ vars.AWS_ACCESS_KEY_ID}} \
              -e MINIO_ROOT_PASSWORD=${{ secrets.AWS_SECRET_ACCESS_KEY}} \
              -v ~/minio/data:/data \
              minio/minio:latest \
              server --address 0.0.0.0:9000 --console-address ":9001" /data
          fi

          EOF
